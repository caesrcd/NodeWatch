#!/usr/bin/env bash

# Check if a command is available
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if the script is running as root
check_root() {
    [ "$EUID" -ne 0 ] || return

    echo "Requires root privileges."
    if command_exists sudo; then
        echo "Enter the user password to continue (sudo):"
        exec sudo "$0" "$@"
    else
        echo "Enter the root user password to continue:"
        exec su -c "$0" "$@"
    fi
}

# Install packages based on the package manager
install_package() {
    for pkg in $1; do
        if command_exists apt; then
            apt install -y --ignore-missing "$pkg"
        elif command_exists apt-get; then
            apt-get install --ignore-missing -y "$pkg"
        elif command_exists yum; then
            yum install -y "$pkg"
        elif command_exists dnf; then
            dnf install -y "$pkg"
        elif command_exists pacman; then
            if [ "$pkg" == "multitail" ]; then
                pacman -S --needed --noconfirm base-devel git
                if command_exists yay; then
                    exec_nosudo="yay -S multitail"
                else
                    exec_nosudo="git clone https://aur.archlinux.org/multitail.git multitail/build/;"
                    exec_nosudo+="makepkg -si --noconfirm -D multitail/build/"
                fi
                sudo -u "$SUDO_USER" bash -c "$exec_nosudo"
            else
                pacman -S --noconfirm "$pkg"
            fi
        else
            echo "No known package managers found!"
            exit 1
        fi
    done
}

# List of commands to check
cmd_list=("bitcoin-cli" "tmux" "htop" "iostat" "multitail" "figlet" "play" "jq" "bc")

# Corresponding packages for each command
declare -A packages=(
    ["tmux"]="tmux"
    ["htop"]="htop"
    ["iostat"]="sysstat"
    ["multitail"]="multitail"
    ["figlet"]="figlet"
    ["play"]="sox libsox-fmt-all soxr libsoxr"
    ["jq"]="jq"
    ["bc"]="bc"
)

# Check if the commands are installed and install if necessary
for cmd in "${cmd_list[@]}"; do
    if command_exists "$cmd"; then
        continue
    fi
    echo "The '$cmd' command is not installed."
    if [ -z "${packages[$cmd]}" ]; then
        echo "This package will have to be installed manually."
        exit 1
    fi
    echo "Installing..."
    check_root
    install_package "${packages[$cmd]}"
done

exit 0
